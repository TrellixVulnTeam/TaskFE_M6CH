{"ast":null,"code":"import { Component, ViewEncapsulation, ElementRef, Input, HostBinding, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { VgApiService, VgCoreModule } from '@videogular/ngx-videogular/core';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@videogular/ngx-videogular/core';\nlet VgBufferingComponent = /*#__PURE__*/(() => {\n  class VgBufferingComponent {\n    constructor(ref, API) {\n      this.API = API;\n      this.checkInterval = 50;\n      this.currentPlayPos = 0;\n      this.lastPlayPos = 0;\n      this.subscriptions = [];\n      this.isBuffering = false;\n      this.elem = ref.nativeElement;\n    }\n\n    ngOnInit() {\n      if (this.API.isPlayerReady) {\n        this.onPlayerReady();\n      } else {\n        this.subscriptions.push(this.API.playerReadyEvent.subscribe(() => this.onPlayerReady()));\n      }\n    }\n\n    onPlayerReady() {\n      this.target = this.API.getMediaById(this.vgFor);\n      this.subscriptions.push(this.target.subscriptions.bufferDetected.subscribe(isBuffering => this.onUpdateBuffer(isBuffering)));\n    }\n\n    onUpdateBuffer(isBuffering) {\n      this.isBuffering = isBuffering;\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n  }\n\n  VgBufferingComponent.ɵfac = function VgBufferingComponent_Factory(t) {\n    return new (t || VgBufferingComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.VgApiService));\n  };\n\n  VgBufferingComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: VgBufferingComponent,\n    selectors: [[\"vg-buffering\"]],\n    hostVars: 2,\n    hostBindings: function VgBufferingComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"is-buffering\", ctx.isBuffering);\n      }\n    },\n    inputs: {\n      vgFor: \"vgFor\"\n    },\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"vg-buffering\"], [1, \"bufferingContainer\"], [1, \"loadingSpinner\"]],\n    template: function VgBufferingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelement(2, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\\n      vg-buffering {\\n        display: none;\\n        z-index: 201;\\n      }\\n      vg-buffering.is-buffering {\\n        display: block;\\n      }\\n\\n      .vg-buffering {\\n        position: absolute;\\n        display: block;\\n        width: 100%;\\n        height: 100%;\\n      }\\n      .vg-buffering .bufferingContainer {\\n        width: 100%;\\n        position: absolute;\\n        cursor: pointer;\\n        top: 50%;\\n        margin-top: -50px;\\n        zoom: 1;\\n        filter: alpha(opacity=60);\\n        opacity: 0.6;\\n      }\\n      /* Loading Spinner\\n        * http://www.alessioatzeni.com/blog/css3-loading-animation-loop/\\n        */\\n      .vg-buffering .loadingSpinner {\\n        background-color: rgba(0, 0, 0, 0);\\n        border: 5px solid rgba(255, 255, 255, 1);\\n        opacity: 0.9;\\n        border-top: 5px solid rgba(0, 0, 0, 0);\\n        border-left: 5px solid rgba(0, 0, 0, 0);\\n        border-radius: 50px;\\n        box-shadow: 0 0 35px #ffffff;\\n        width: 50px;\\n        height: 50px;\\n        margin: 0 auto;\\n        -moz-animation: spin 0.5s infinite linear;\\n        -webkit-animation: spin 0.5s infinite linear;\\n      }\\n      .vg-buffering .loadingSpinner .stop {\\n        -webkit-animation-play-state: paused;\\n        -moz-animation-play-state: paused;\\n      }\\n      @-moz-keyframes spin {\\n        0% {\\n          -moz-transform: rotate(0deg);\\n        }\\n        100% {\\n          -moz-transform: rotate(360deg);\\n        }\\n      }\\n      @-moz-keyframes spinoff {\\n        0% {\\n          -moz-transform: rotate(0deg);\\n        }\\n        100% {\\n          -moz-transform: rotate(-360deg);\\n        }\\n      }\\n      @-webkit-keyframes spin {\\n        0% {\\n          -webkit-transform: rotate(0deg);\\n        }\\n        100% {\\n          -webkit-transform: rotate(360deg);\\n        }\\n      }\\n      @-webkit-keyframes spinoff {\\n        0% {\\n          -webkit-transform: rotate(0deg);\\n        }\\n        100% {\\n          -webkit-transform: rotate(-360deg);\\n        }\\n      }\\n    \"],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return VgBufferingComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet VgBufferingModule = /*#__PURE__*/(() => {\n  class VgBufferingModule {}\n\n  VgBufferingModule.ɵfac = function VgBufferingModule_Factory(t) {\n    return new (t || VgBufferingModule)();\n  };\n\n  VgBufferingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: VgBufferingModule\n  });\n  VgBufferingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, VgCoreModule]]\n  });\n  return VgBufferingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(VgBufferingModule, {\n    declarations: function () {\n      return [VgBufferingComponent];\n    },\n    imports: function () {\n      return [CommonModule, VgCoreModule];\n    },\n    exports: function () {\n      return [VgBufferingComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { VgBufferingComponent, VgBufferingModule }; //# sourceMappingURL=videogular-ngx-videogular-buffering.js.map","map":null,"metadata":{},"sourceType":"module"}