{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(_loginService, _router) {\n      this._loginService = _loginService;\n      this._router = _router;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        if ([401, 403].indexOf(err.status) !== -1) {\n          // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n          this._loginService.logout();\n\n          this._router.navigate([\"/auth/login\"]);\n        }\n\n        console.log(err.error.errors);\n        return throwError(err.error);\n      }));\n    }\n\n  }\n\n  ErrorInterceptor.ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  ErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}